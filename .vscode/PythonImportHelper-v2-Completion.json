[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "loader",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "loader",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "loader",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "ASCIIUsernameValidator",
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "mini_app2",
        "description": "mini_app2",
        "isExtraImport": true,
        "detail": "mini_app2",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "mini_app2",
        "description": "mini_app2",
        "isExtraImport": true,
        "detail": "mini_app2",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "FigureCanvasAgg",
        "importPath": "matplotlib.backends.backend_agg",
        "description": "matplotlib.backends.backend_agg",
        "isExtraImport": true,
        "detail": "matplotlib.backends.backend_agg",
        "documentation": {}
    },
    {
        "label": "MaxNLocator",
        "importPath": "matplotlib.ticker",
        "description": "matplotlib.ticker",
        "isExtraImport": true,
        "detail": "matplotlib.ticker",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "never_cache",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
        "label": "get_random_string",
        "importPath": "django.utils.crypto",
        "description": "django.utils.crypto",
        "isExtraImport": true,
        "detail": "django.utils.crypto",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "django.contrib.sessions.models",
        "description": "django.contrib.sessions.models",
        "isExtraImport": true,
        "detail": "django.contrib.sessions.models",
        "documentation": {}
    },
    {
        "label": "SessionStore",
        "importPath": "django.contrib.sessions.backends.db",
        "description": "django.contrib.sessions.backends.db",
        "isExtraImport": true,
        "detail": "django.contrib.sessions.backends.db",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app1.migrations.0001_initial",
        "description": "mini_pro.my_mini_project.mini_app1.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Member',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),",
        "detail": "mini_pro.my_mini_project.mini_app1.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "MiniApp1Config",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app1.apps",
        "description": "mini_pro.my_mini_project.mini_app1.apps",
        "peekOfCode": "class MiniApp1Config(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'mini_app1'",
        "detail": "mini_pro.my_mini_project.mini_app1.apps",
        "documentation": {}
    },
    {
        "label": "Member",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app1.models",
        "description": "mini_pro.my_mini_project.mini_app1.models",
        "peekOfCode": "class Member(models.Model):\n    name = models.CharField(max_length=255)\n    password = models.CharField(max_length=255)",
        "detail": "mini_pro.my_mini_project.mini_app1.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.mini_app1.urls",
        "description": "mini_pro.my_mini_project.mini_app1.urls",
        "peekOfCode": "urlpatterns = [\n    path('members/', views.members, name='members'),\n]",
        "detail": "mini_pro.my_mini_project.mini_app1.urls",
        "documentation": {}
    },
    {
        "label": "members",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app1.views",
        "description": "mini_pro.my_mini_project.mini_app1.views",
        "peekOfCode": "def members(request):\n   mymembers = Member.objects.all().values()\n   template = loader.get_template('all_members.html')\n   context = {\n    'mymembers': mymembers,\n   }\n   return HttpResponse(template.render(context, request))",
        "detail": "mini_pro.my_mini_project.mini_app1.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.migrations.0001_initial",
        "description": "mini_pro.my_mini_project.mini_app2.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Student',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "mini_pro.my_mini_project.mini_app2.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.migrations.0002_alter_officialsuser_password",
        "description": "mini_pro.my_mini_project.mini_app2.migrations.0002_alter_officialsuser_password",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('mini_app2', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='officialsuser',\n            name='password',\n            field=models.CharField(max_length=50),\n        ),",
        "detail": "mini_pro.my_mini_project.mini_app2.migrations.0002_alter_officialsuser_password",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.migrations.0003_alter_officialsuser_password",
        "description": "mini_pro.my_mini_project.mini_app2.migrations.0003_alter_officialsuser_password",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('mini_app2', '0002_alter_officialsuser_password'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='officialsuser',\n            name='password',\n            field=models.CharField(max_length=5000),\n        ),",
        "detail": "mini_pro.my_mini_project.mini_app2.migrations.0003_alter_officialsuser_password",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.migrations.0004_remove_student_age",
        "description": "mini_pro.my_mini_project.mini_app2.migrations.0004_remove_student_age",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('mini_app2', '0003_alter_officialsuser_password'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='student',\n            name='age',\n        ),\n    ]",
        "detail": "mini_pro.my_mini_project.mini_app2.migrations.0004_remove_student_age",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.migrations.0005_sectionteacher_dailyattendance",
        "description": "mini_pro.my_mini_project.mini_app2.migrations.0005_sectionteacher_dailyattendance",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('mini_app2', '0004_remove_student_age'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='SectionTeacher',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('teacher_id', models.CharField(max_length=50, unique=True)),",
        "detail": "mini_pro.my_mini_project.mini_app2.migrations.0005_sectionteacher_dailyattendance",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.migrations.0006_alter_sectionteacher_section",
        "description": "mini_pro.my_mini_project.mini_app2.migrations.0006_alter_sectionteacher_section",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('mini_app2', '0005_sectionteacher_dailyattendance'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='sectionteacher',\n            name='section',\n            field=models.CharField(max_length=50, unique=True),\n        ),",
        "detail": "mini_pro.my_mini_project.mini_app2.migrations.0006_alter_sectionteacher_section",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.migrations.0007_teacherregistration_remove_sectionteacher_created_at_and_more",
        "description": "mini_pro.my_mini_project.mini_app2.migrations.0007_teacherregistration_remove_sectionteacher_created_at_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('mini_app2', '0006_alter_sectionteacher_section'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TeacherRegistration',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('teacher_id', models.CharField(max_length=10, unique=True)),",
        "detail": "mini_pro.my_mini_project.mini_app2.migrations.0007_teacherregistration_remove_sectionteacher_created_at_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.migrations.0008_alter_teacherregistration_password_and_more",
        "description": "mini_pro.my_mini_project.mini_app2.migrations.0008_alter_teacherregistration_password_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('mini_app2', '0007_teacherregistration_remove_sectionteacher_created_at_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='teacherregistration',\n            name='password',\n            field=models.CharField(max_length=200),\n        ),",
        "detail": "mini_pro.my_mini_project.mini_app2.migrations.0008_alter_teacherregistration_password_and_more",
        "documentation": {}
    },
    {
        "label": "OfficialsUserAdmin",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.admin",
        "description": "mini_pro.my_mini_project.mini_app2.admin",
        "peekOfCode": "class OfficialsUserAdmin(admin.ModelAdmin):\n    list_display = ['name', 'password', 'created_at', 'updated_at']\n    search_fields = ['name']\n    ordering = ['name']  # Change this to the field you want to use for ordering",
        "detail": "mini_pro.my_mini_project.mini_app2.admin",
        "documentation": {}
    },
    {
        "label": "MiniApp2Config",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.apps",
        "description": "mini_pro.my_mini_project.mini_app2.apps",
        "peekOfCode": "class MiniApp2Config(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'mini_app2'",
        "detail": "mini_pro.my_mini_project.mini_app2.apps",
        "documentation": {}
    },
    {
        "label": "StudentLoginForm",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.forms",
        "description": "mini_pro.my_mini_project.mini_app2.forms",
        "peekOfCode": "class StudentLoginForm(forms.Form):\n    student_id = forms.IntegerField(label='Student ID')\n    password = forms.IntegerField(label='Password(DDMMYYYY)')\n# mini_app2/forms.py\nfrom django import forms\nclass TeacherRegistrationForm(forms.Form):\n    teacher_id = forms.CharField(label='Teacher ID')\n    password = forms.CharField(widget=forms.PasswordInput, label='Password')\n    section = forms.CharField(label='Section')\n    # mini_app2/forms.py",
        "detail": "mini_pro.my_mini_project.mini_app2.forms",
        "documentation": {}
    },
    {
        "label": "TeacherRegistrationForm",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.forms",
        "description": "mini_pro.my_mini_project.mini_app2.forms",
        "peekOfCode": "class TeacherRegistrationForm(forms.Form):\n    teacher_id = forms.CharField(label='Teacher ID')\n    password = forms.CharField(widget=forms.PasswordInput, label='Password')\n    section = forms.CharField(label='Section')\n    # mini_app2/forms.py\nfrom django import forms\nclass TeacherLoginForm(forms.Form):\n    teacher_id = forms.CharField(label='Teacher ID')\n    password = forms.CharField(widget=forms.PasswordInput, label='Password')\n    section = forms.CharField(label='Section')",
        "detail": "mini_pro.my_mini_project.mini_app2.forms",
        "documentation": {}
    },
    {
        "label": "TeacherLoginForm",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.forms",
        "description": "mini_pro.my_mini_project.mini_app2.forms",
        "peekOfCode": "class TeacherLoginForm(forms.Form):\n    teacher_id = forms.CharField(label='Teacher ID')\n    password = forms.CharField(widget=forms.PasswordInput, label='Password')\n    section = forms.CharField(label='Section')",
        "detail": "mini_pro.my_mini_project.mini_app2.forms",
        "documentation": {}
    },
    {
        "label": "OfficialsManager",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.models",
        "description": "mini_pro.my_mini_project.mini_app2.models",
        "peekOfCode": "class OfficialsManager(BaseUserManager):\n    def create_user(self, name, password=None, **extra_fields):\n        if not name:\n            raise ValueError('The Name field must be set')\n        user = self.model(name=name, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, name, password=None, **extra_fields):\n        extra_fields.setdefault('is_staff', True)",
        "detail": "mini_pro.my_mini_project.mini_app2.models",
        "documentation": {}
    },
    {
        "label": "OfficialsUser",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.models",
        "description": "mini_pro.my_mini_project.mini_app2.models",
        "peekOfCode": "class OfficialsUser(AbstractBaseUser, PermissionsMixin):\n    name = models.CharField(max_length=30, unique=True, validators=[ASCIIUsernameValidator()])\n    password = models.CharField(max_length=5000)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    objects = OfficialsManager()\n    USERNAME_FIELD = 'name'\n    REQUIRED_FIELDS = []  # Add other fields if needed",
        "detail": "mini_pro.my_mini_project.mini_app2.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.models",
        "description": "mini_pro.my_mini_project.mini_app2.models",
        "peekOfCode": "class Student(models.Model):\n    student_id = models.BigIntegerField(unique=True)\n    student_name = models.CharField(max_length=50)\n    student_aadhar = models.BigIntegerField(unique=True)\n    student_phone = models.CharField(max_length=20)\n    student_email = models.EmailField()\n    # age = models.IntegerField()\n    gender = models.CharField(max_length=10, choices=[(\"male\", \"Male\"), (\"female\", \"Female\")])\n    student_dob = models.DateField()\n    student_address = models.TextField()",
        "detail": "mini_pro.my_mini_project.mini_app2.models",
        "documentation": {}
    },
    {
        "label": "SectionTeacher",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.models",
        "description": "mini_pro.my_mini_project.mini_app2.models",
        "peekOfCode": "class SectionTeacher(models.Model):\n    teacher_id = models.CharField(max_length=50, unique=True)\n    password = models.CharField(max_length=50)\n    section = models.CharField(max_length=10)\n    def __str__(self):\n        return self.teacher_id\n# mini_app2/models.py\nfrom django.db import models\nclass TeacherRegistration(models.Model):\n    teacher_id = models.CharField(max_length=100, unique=True)",
        "detail": "mini_pro.my_mini_project.mini_app2.models",
        "documentation": {}
    },
    {
        "label": "TeacherRegistration",
        "kind": 6,
        "importPath": "mini_pro.my_mini_project.mini_app2.models",
        "description": "mini_pro.my_mini_project.mini_app2.models",
        "peekOfCode": "class TeacherRegistration(models.Model):\n    teacher_id = models.CharField(max_length=100, unique=True)\n    password = models.CharField(max_length=200)\n    section = models.CharField(max_length=100)",
        "detail": "mini_pro.my_mini_project.mini_app2.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.mini_app2.urls",
        "description": "mini_pro.my_mini_project.mini_app2.urls",
        "peekOfCode": "urlpatterns = [\n    # path('admin/', admin.site.urls),\n    path('', views.index, name='index'),\n    # path('officials/', views.officials, name='officials'),\n    path('officials/', views.Officials, name='officials'),\n    path('logout_officials/', views.logout_officials, name='logout_officials'),\n    path('ST_login/', views.ST_login, name='ST_login'),\n    path('services/', views.services, name='services'),\n    path('teacher_registration/', views.teacher_registration, name='teacher_registration'),\n    path('teacher_login/', views.teacher_login, name='teacher_login'),",
        "detail": "mini_pro.my_mini_project.mini_app2.urls",
        "documentation": {}
    },
    {
        "label": "get_csv_path",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.utils",
        "description": "mini_pro.my_mini_project.mini_app2.utils",
        "peekOfCode": "def get_csv_path(section, date):\n    csv_dir = os.path.join('attendance_csv', section)\n    os.makedirs(csv_dir, exist_ok=True)\n    csv_file = f\"{section}_attendance.csv\"  # Simplified file name for daily att.\n    # csv_file = f\"{date.strftime('%Y%m%d')}.csv\"\n    return os.path.join(csv_dir, csv_file)\ndef update_attendance_csv(csv_file_path, students_data, is_present_list):\n    now = datetime.datetime.now()\n    # today = datetime.date.today()\n    # now = today + datetime.timedelta(days=1)",
        "detail": "mini_pro.my_mini_project.mini_app2.utils",
        "documentation": {}
    },
    {
        "label": "update_attendance_csv",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.utils",
        "description": "mini_pro.my_mini_project.mini_app2.utils",
        "peekOfCode": "def update_attendance_csv(csv_file_path, students_data, is_present_list):\n    now = datetime.datetime.now()\n    # today = datetime.date.today()\n    # now = today + datetime.timedelta(days=1)\n    file_exists = os.path.exists(csv_file_path)\n    if file_exists:\n        with open(csv_file_path, 'r', newline='') as csvfile:\n            csv_reader = csv.reader(csvfile)\n            data = list(csv_reader)\n            # Get the headers from the existing data",
        "detail": "mini_pro.my_mini_project.mini_app2.utils",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def index(request):\n    try:\n        # pass\n        return render(request, \"index.html\")\n    except Exception as e :\n        return HttpResponse(f\"Error occured : {e}\")\ndef contact(request):\n    # pass\n    return render(request, \"contact.html\")\ndef ST_login(request):",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "contact",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def contact(request):\n    # pass\n    return render(request, \"contact.html\")\ndef ST_login(request):\n    try:\n        pass\n        return render(request, \"ST_login.html\")\n    except Exception as e :\n        return HttpResponse(f\"Error occured : {e}\")\nfrom django.contrib.auth import logout",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "ST_login",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def ST_login(request):\n    try:\n        pass\n        return render(request, \"ST_login.html\")\n    except Exception as e :\n        return HttpResponse(f\"Error occured : {e}\")\nfrom django.contrib.auth import logout\nfrom django.views.decorators.cache import never_cache\n@login_required(login_url='/officials/')\n# @never_cache",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "services",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def services(request):\n    if request.method == 'POST':\n        # and 'logout' in request.POST:\n        logout(request)\n        return redirect('/') \n    return render(request, \"services.html\")\n# def officials(request):\ndef Officials(request):\n    if request.method == 'POST':\n        official_id = request.POST.get('userid')",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "Officials",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def Officials(request):\n    if request.method == 'POST':\n        official_id = request.POST.get('userid')\n        password = request.POST.get('password')\n        # Authenticate user\n        user = authenticate(request, name=official_id, password=password)\n        if user is not None:\n            # Login the user\n            login(request, user)\n            return redirect('services')",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "logout_officials",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def logout_officials(request):\n    # logout(request)\n    return redirect('logout_officials')  # Redirect to the login page after logout\n    # return LogoutView.as_view()(request, next_page='officials_logout')  # Redirect to login page after logout\ndef form(request):\n    message = \"\"  # Initialize message outside the conditional block\n    if request.method == 'POST':\n        try:\n            student_id = request.POST.get('student_id')\n            student_name = request.POST.get('student_name')",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "form",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def form(request):\n    message = \"\"  # Initialize message outside the conditional block\n    if request.method == 'POST':\n        try:\n            student_id = request.POST.get('student_id')\n            student_name = request.POST.get('student_name')\n            student_aadhar = request.POST.get('student_aadhar')\n            student_phone = request.POST.get('student_phone')\n            student_email = request.POST.get('student_email')\n            # age = request.POST.get('age')",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "generate_otp",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def generate_otp():\n    return get_random_string(length=6, allowed_chars='0123456789')\n# def send_otp_email():\ndef send_otp_email(otp_code,student_email):\n    subject = 'OTP Confirmation'\n    message = f'Your OTP code is: {otp_code}'\n    from_email = settings.EMAIL_HOST_USER  # Replace with your email\n    recipient_list = [student_email]\n    # print('...........\\n\\n',recipient_list,'\\n\\n.........')\n    # recipient_list = ['Your Gmail .com']",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "send_otp_email",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def send_otp_email(otp_code,student_email):\n    subject = 'OTP Confirmation'\n    message = f'Your OTP code is: {otp_code}'\n    from_email = settings.EMAIL_HOST_USER  # Replace with your email\n    recipient_list = [student_email]\n    # print('...........\\n\\n',recipient_list,'\\n\\n.........')\n    # recipient_list = ['Your Gmail .com']\n    send_mail(subject, message, from_email, recipient_list)\ndef otp_verification(request):\n    # Check if the form data is present in the session",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "otp_verification",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def otp_verification(request):\n    # Check if the form data is present in the session\n    if 'form_data' not in request.session:\n        return redirect('form')\n    if request.method == 'POST':\n        try:\n            # request.session['otp_verified'] = False\n            # Check if it's a regular OTP verification attempt\n            if 'resend_otp' not in request.POST:\n                entered_otp = request.POST.get('entered_otp')",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "thanks",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def thanks(request):\n    if not (request.session.get('otp_verified') and request.session.get('form_data')):\n        # If OTP is not verified or form data is not present, redirect to form\n        return redirect('form')\n    form_data = request.session.get('form_data')\n    # Save data to the database\n    back = Student(**form_data)\n    back.save()\n    # Clear the form data from session\n    del request.session['form_data']",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "student_login",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def student_login(request): #DDMMYYYY\n    try:\n        if request.method == 'POST':\n            form = StudentLoginForm(request.POST)\n            if form.is_valid():\n                student_id = form.cleaned_data['student_id']\n                raw_password = str(form.cleaned_data['password'])  # Convert to string\n                # Convert the raw password (DDMMYYYY) to the required format ('YYYY-MM-DD')\n                formatted_password = f\"{raw_password[4:8]}-{raw_password[2:4]}-{raw_password[0:2]}\"\n                # Check if the student with the provided ID and formatted password exists",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "student_details",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def student_details(request, student_id):\n    student = get_object_or_404(Student, student_id=student_id)\n    return render(request, 'student_details.html', {'student': student})\n# mini_app2/views.py\nfrom django.shortcuts import render, redirect\nfrom django.contrib import messages\nfrom .forms import TeacherLoginForm, TeacherRegistrationForm \n@login_required(login_url='/officials/')\ndef teacher_registration(request):\n    # try:",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "teacher_registration",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def teacher_registration(request):\n    # try:\n    if request.method == 'POST':\n        form = TeacherRegistrationForm(request.POST)\n        if form.is_valid():\n            teacher_id = form.cleaned_data['teacher_id']\n            password = form.cleaned_data['password']\n            section = form.cleaned_data['section']\n            # Create a new teacher registration entry\n            TeacherRegistration.objects.create(teacher_id=teacher_id, password=password, section=section)",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "teacher_login",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def teacher_login(request):\n    if request.method == 'POST':\n        form = TeacherLoginForm(request.POST)\n        if form.is_valid():\n            teacher_id = form.cleaned_data['teacher_id']\n            password = form.cleaned_data['password']\n            section = form.cleaned_data['section']\n            # Check if the provided credentials are valid\n            try:\n                teacher = TeacherRegistration.objects.get(teacher_id=teacher_id, password=password, section=section)",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "teacher_dashboard",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def teacher_dashboard(request, section):\n    now = datetime.datetime.now()\n    students_data = Student.objects.filter(section=section)\n    csv_file_path = get_csv_path(section, now)\n    if request.method == 'POST':\n        is_present_list = {}\n        # Iterate through the students to get the attendance values\n        for student in students_data:\n            key = f'student_{student.id}'\n            value = request.POST.get(key, 'A')  # Use get() to handle non-selected radio buttons",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "data_analysis",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def data_analysis(request):     # function name must be data_analysis ************\n    students_data = Student.objects.all()\n    return render(request, 'data_analysis.html', {'students': students_data})\nfrom django.http import HttpResponse\nimport csv\nfrom django.contrib import messages\ndef export_excel(request):\n    students_data = Student.objects.all()\n    # Create a response object with appropriate headers for an Excel file\n    response = HttpResponse(content_type='text/csv')",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "export_excel",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def export_excel(request):\n    students_data = Student.objects.all()\n    # Create a response object with appropriate headers for an Excel file\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment; filename=student_data.csv'\n    csv_writer = csv.writer(response)\n    headers = ['Student ID', 'Student Name']\n    csv_writer.writerow(headers)\n    # Write the student data\n    for student in students_data:",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "data_visualization",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def data_visualization(request):\n    try:\n        # Retrieve data from the database\n        # gender_count = Student.objects.values('gender').annotate(count=Count('id'))\n        gender_stats = Student.objects.filter(gender='Male').count(), Student.objects.filter(gender='Female').count()\n        attendance_stats = Student.objects.filter(attendance__gt=75).count(), Student.objects.filter(attendance__lte=75).count()\n        marks_stats = Student.objects.filter(marks__gt=35).count(), Student.objects.filter(marks__lte=35).count()\n        fees_stats = Student.objects.filter(fees='Paid').count(), Student.objects.filter(fees='Unpaid').count()\n        # age_distribution = Student.objects.values_list('age', flat=True)\n        city_distribution = Student.objects.values('city_name').annotate(count=Count('id'))",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def search(request):\n    if request.method == 'POST':\n        # Get user inputs from the form\n        student_id = request.POST.get('student_id')\n        student_name = request.POST.get('student_name')\n        student_aadhar = request.POST.get('student_aadhar')\n        student_phone = request.POST.get('student_phone')\n        gender = request.POST.get('gender')\n        section = request.POST.get('section')\n        attendance_from = request.POST.get('attendance_from')",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "download_csv",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def download_csv(request):\n    # Get user inputs from the form\n    student_id = request.POST.get('student_id')\n    student_name = request.POST.get('student_name')\n    student_aadhar = request.POST.get('student_aadhar')\n    student_phone = request.POST.get('student_phone')\n    gender = request.POST.get('gender')\n    section = request.POST.get('section')\n    attendance_from = request.POST.get('attendance_from')\n    attendance_to = request.POST.get('attendance_to')",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "email_download_csv",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def email_download_csv(request):\n    # Get user inputs from the form\n    student_id = request.POST.get('student_id')\n    student_name = request.POST.get('student_name')\n    student_aadhar = request.POST.get('student_aadhar')\n    student_phone = request.POST.get('student_phone')\n    gender = request.POST.get('gender')\n    section = request.POST.get('section')\n    attendance_from = request.POST.get('attendance_from')\n    attendance_to = request.POST.get('attendance_to')",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "delete_selected",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def delete_selected(request):\n    if request.method == 'POST':\n        selected_students = request.POST.getlist('selected_students')\n        delete_action = request.POST.get('delete_action')\n        if delete_action == 'delete_all':\n            # Delete all shown students\n            Student.objects.all().delete()\n        elif delete_action == 'delete_selected':\n            # Delete selected students\n            Student.objects.filter(id__in=selected_students).delete()",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "update_student",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def update_student(request, student_id):\n    student = get_object_or_404(Student, id=student_id)\n    if request.method == 'POST':\n        # Update the student details based on the form submission\n        student.student_id = request.POST.get('student_id')     #********************\n        student.student_name = request.POST.get('student_name')\n        student.student_aadhar = request.POST.get('student_aadhar')\n        student.student_phone = request.POST.get('student_phone')\n        student.student_email = request.POST.get('student_email')\n        # student.age = request.POST.get('age')",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "generate_unique_id_aadhar",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def generate_unique_id_aadhar():\n    student_id = fake.unique.random_number(digits=8)\n    student_aadhar = fake.unique.random_number(digits=10)\n    return student_id, student_aadhar\n# add random data in your database ......................................\ndef add_random_students():\n    for _ in range(30):\n        student_id, student_aadhar = generate_unique_id_aadhar()\n        student = Student(\n            student_id=student_id,",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "add_random_students",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "def add_random_students():\n    for _ in range(30):\n        student_id, student_aadhar = generate_unique_id_aadhar()\n        student = Student(\n            student_id=student_id,\n            student_name=random.choice(['Aditya', 'Aryan','Ravi','Prakash','Deepak','Diya', 'Payal','Priya','Rani','Harry']),\n            student_aadhar=student_aadhar,\n            student_phone=random.randint(11111, 2522222),\n            student_email=fake.email(),\n            # age=random.choice([19,20,21,22,23]),",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "fake = Faker()\nfrom django.utils import timezone\nimport matplotlib.pyplot as plt\nfrom django.db.models import Count\nimport datetime\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas\nimport os\nfrom matplotlib.ticker import MaxNLocator\nfrom datetime import datetime\nfrom django.db import IntegrityError",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.mini_app2.views",
        "description": "mini_pro.my_mini_project.mini_app2.views",
        "peekOfCode": "User = get_user_model()\ndef generate_otp():\n    return get_random_string(length=6, allowed_chars='0123456789')\n# def send_otp_email():\ndef send_otp_email(otp_code,student_email):\n    subject = 'OTP Confirmation'\n    message = f'Your OTP code is: {otp_code}'\n    from_email = settings.EMAIL_HOST_USER  # Replace with your email\n    recipient_list = [student_email]\n    # print('...........\\n\\n',recipient_list,'\\n\\n.........')",
        "detail": "mini_pro.my_mini_project.mini_app2.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.asgi",
        "description": "mini_pro.my_mini_project.my_mini_project.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "mini_pro.my_mini_project.my_mini_project.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-qgg*wrc%s3x1#96a!y-f+4760mpfn05(yap+q%g9n#7sbr(-)z'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n# DEBUG = False\n# Application definition\nINSTALLED_APPS = [",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-qgg*wrc%s3x1#96a!y-f+4760mpfn05(yap+q%g9n#7sbr(-)z'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n# DEBUG = False\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "DEBUG = True\n# DEBUG = False\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'whitenoise.runserver_nostatic',  # Add this line\n    \"mini_app1\",\n    \"mini_app2\",",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    # 'django.middleware.csrf.CsrfViewMiddleware',  #CSRF..............\n    # first login then use services .........\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    # Added this line..............",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "CACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n        'LOCATION': 'unique-snowflake',\n    }\n}\nROOT_URLCONF = 'my_mini_project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "ROOT_URLCONF = 'my_mini_project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        # Add the project-level templates directory ..............\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        # Add the project-level templates directory ..............\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "WSGI_APPLICATION = 'my_mini_project.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',       # Mysql database is used *************************\n        'NAME': 'Your Name........',\n        'USER': 'your User_name.........',\n        'PASSWORD': 'Your password..........',\n        # 'HOST': '127.0.0.1',",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',       # Mysql database is used *************************\n        'NAME': 'Your Name........',\n        'USER': 'your User_name.........',\n        'PASSWORD': 'Your password..........',\n        # 'HOST': '127.0.0.1',\n        'HOST': 'localhost',\n        'PORT': '3306',\n    }",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'Asia/Kolkata'      # Bharat Time zone............\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Add the project-level static directory\n]",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "TIME_ZONE = 'Asia/Kolkata'      # Bharat Time zone............\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Add the project-level static directory\n]\n# for versel by clickton",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Add the project-level static directory\n]\n# for versel by clickton\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_build', 'static')",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Add the project-level static directory\n]\n# for versel by clickton\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_build', 'static')\n# Default primary key field type",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Add the project-level static directory\n]\n# for versel by clickton\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_build', 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'    # for larger length numbers .............\n# for using media file ****************",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Add the project-level static directory\n]\n# for versel by clickton\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_build', 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'    # for larger length numbers .............\n# for using media file ****************\nMEDIA_ROOT = BASE_DIR/\"media\"",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_build', 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'    # for larger length numbers .............\n# for using media file ****************\nMEDIA_ROOT = BASE_DIR/\"media\"\nMEDIA_URL = \"/media/\"\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n]",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'    # for larger length numbers .............\n# for using media file ****************\nMEDIA_ROOT = BASE_DIR/\"media\"\nMEDIA_URL = \"/media/\"\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n]\n# AUTH_USER_MODEL = 'mini_app2.Officials'\nAUTH_USER_MODEL = 'mini_app2.OfficialsUser'     # authentication .............\nLOGOUT_REDIRECT_URL = '/'  # Replace 'home' with the name of the desired URL or path",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR/\"media\"\nMEDIA_URL = \"/media/\"\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n]\n# AUTH_USER_MODEL = 'mini_app2.Officials'\nAUTH_USER_MODEL = 'mini_app2.OfficialsUser'     # authentication .............\nLOGOUT_REDIRECT_URL = '/'  # Replace 'home' with the name of the desired URL or path\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  \nEMAIL_HOST = 'smtp.gmail.com'",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n]\n# AUTH_USER_MODEL = 'mini_app2.Officials'\nAUTH_USER_MODEL = 'mini_app2.OfficialsUser'     # authentication .............\nLOGOUT_REDIRECT_URL = '/'  # Replace 'home' with the name of the desired URL or path\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  \nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_USE_TLS = True",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n]\n# AUTH_USER_MODEL = 'mini_app2.Officials'\nAUTH_USER_MODEL = 'mini_app2.OfficialsUser'     # authentication .............\nLOGOUT_REDIRECT_URL = '/'  # Replace 'home' with the name of the desired URL or path\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  \nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_USE_TLS = True\nEMAIL_PORT = 587",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'mini_app2.OfficialsUser'     # authentication .............\nLOGOUT_REDIRECT_URL = '/'  # Replace 'home' with the name of the desired URL or path\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  \nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_USE_TLS = True\nEMAIL_PORT = 587\nEMAIL_HOST_USER = 'Your Gmail .com............'\nEMAIL_HOST_PASSWORD = 'EMAIL_HOST_PASSWORD is something like this --> \"owhc meuc hyuq pxpt\" '\nCSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8000/',                              # CSRF problem ..............\n                        'http://127.0.0.1:8000/testpage10.html', 'http://127.0.0.1:8000/officials/']",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = '/'  # Replace 'home' with the name of the desired URL or path\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  \nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_USE_TLS = True\nEMAIL_PORT = 587\nEMAIL_HOST_USER = 'Your Gmail .com............'\nEMAIL_HOST_PASSWORD = 'EMAIL_HOST_PASSWORD is something like this --> \"owhc meuc hyuq pxpt\" '\nCSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8000/',                              # CSRF problem ..............\n                        'http://127.0.0.1:8000/testpage10.html', 'http://127.0.0.1:8000/officials/']\nCSRF_COOKIE_SECURE = True           # CSRF and COOKIE problem ..............",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  \nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_USE_TLS = True\nEMAIL_PORT = 587\nEMAIL_HOST_USER = 'Your Gmail .com............'\nEMAIL_HOST_PASSWORD = 'EMAIL_HOST_PASSWORD is something like this --> \"owhc meuc hyuq pxpt\" '\nCSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8000/',                              # CSRF problem ..............\n                        'http://127.0.0.1:8000/testpage10.html', 'http://127.0.0.1:8000/officials/']\nCSRF_COOKIE_SECURE = True           # CSRF and COOKIE problem ..............",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.gmail.com'\nEMAIL_USE_TLS = True\nEMAIL_PORT = 587\nEMAIL_HOST_USER = 'Your Gmail .com............'\nEMAIL_HOST_PASSWORD = 'EMAIL_HOST_PASSWORD is something like this --> \"owhc meuc hyuq pxpt\" '\nCSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8000/',                              # CSRF problem ..............\n                        'http://127.0.0.1:8000/testpage10.html', 'http://127.0.0.1:8000/officials/']\nCSRF_COOKIE_SECURE = True           # CSRF and COOKIE problem ..............",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_PORT = 587\nEMAIL_HOST_USER = 'Your Gmail .com............'\nEMAIL_HOST_PASSWORD = 'EMAIL_HOST_PASSWORD is something like this --> \"owhc meuc hyuq pxpt\" '\nCSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8000/',                              # CSRF problem ..............\n                        'http://127.0.0.1:8000/testpage10.html', 'http://127.0.0.1:8000/officials/']\nCSRF_COOKIE_SECURE = True           # CSRF and COOKIE problem ..............",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_HOST_USER = 'Your Gmail .com............'\nEMAIL_HOST_PASSWORD = 'EMAIL_HOST_PASSWORD is something like this --> \"owhc meuc hyuq pxpt\" '\nCSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8000/',                              # CSRF problem ..............\n                        'http://127.0.0.1:8000/testpage10.html', 'http://127.0.0.1:8000/officials/']\nCSRF_COOKIE_SECURE = True           # CSRF and COOKIE problem ..............",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'Your Gmail .com............'\nEMAIL_HOST_PASSWORD = 'EMAIL_HOST_PASSWORD is something like this --> \"owhc meuc hyuq pxpt\" '\nCSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8000/',                              # CSRF problem ..............\n                        'http://127.0.0.1:8000/testpage10.html', 'http://127.0.0.1:8000/officials/']\nCSRF_COOKIE_SECURE = True           # CSRF and COOKIE problem ..............",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'EMAIL_HOST_PASSWORD is something like this --> \"owhc meuc hyuq pxpt\" '\nCSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8000/',                              # CSRF problem ..............\n                        'http://127.0.0.1:8000/testpage10.html', 'http://127.0.0.1:8000/officials/']\nCSRF_COOKIE_SECURE = True           # CSRF and COOKIE problem ..............",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8000/',                              # CSRF problem ..............\n                        'http://127.0.0.1:8000/testpage10.html', 'http://127.0.0.1:8000/officials/']\nCSRF_COOKIE_SECURE = True           # CSRF and COOKIE problem ..............",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_SECURE",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.settings",
        "description": "mini_pro.my_mini_project.my_mini_project.settings",
        "peekOfCode": "CSRF_COOKIE_SECURE = True           # CSRF and COOKIE problem ..............",
        "detail": "mini_pro.my_mini_project.my_mini_project.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.urls",
        "description": "mini_pro.my_mini_project.my_mini_project.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('mini_app2.urls')),\n    path('', include('mini_app1.urls')),\n]\n# if settings.DEBUG:\nurlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\nurlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)     #for versel by clickton",
        "detail": "mini_pro.my_mini_project.my_mini_project.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.wsgi",
        "description": "mini_pro.my_mini_project.my_mini_project.wsgi",
        "peekOfCode": "application = get_wsgi_application()\napp = application    # for vercel and settings.py(allowed_host)",
        "detail": "mini_pro.my_mini_project.my_mini_project.wsgi",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "mini_pro.my_mini_project.my_mini_project.wsgi",
        "description": "mini_pro.my_mini_project.my_mini_project.wsgi",
        "peekOfCode": "app = application    # for vercel and settings.py(allowed_host)",
        "detail": "mini_pro.my_mini_project.my_mini_project.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mini_pro.my_mini_project.manage",
        "description": "mini_pro.my_mini_project.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_mini_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "mini_pro.my_mini_project.manage",
        "documentation": {}
    }
]